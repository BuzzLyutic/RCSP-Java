package main.java.task3;

// src/main/java/task3/FileGenerator.java

import java.util.Random;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;

public class FileGenerator implements Runnable {
    private final BlockingQueue<File> queue;
    private final Random random = new Random();
    private final AtomicBoolean running = new AtomicBoolean(true);
    private final AtomicInteger generatedCount = new AtomicInteger(0);
    private final AtomicInteger rejectedCount = new AtomicInteger(0);
    
    public FileGenerator(BlockingQueue<File> queue) {
        this.queue = queue;
    }
    
    @Override
    public void run() {
        System.out.println("üöÄ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω");
        
        while (running.get() && !Thread.currentThread().isInterrupted()) {
            try {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                File file = generateRandomFile();
                
                // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                boolean added = queue.offer(file, 100, TimeUnit.MILLISECONDS);
                
                if (added) {
                    generatedCount.incrementAndGet();
                    System.out.println("‚ûï –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: " + file + 
                                     " | –û—á–µ—Ä–µ–¥—å: " + queue.size() + "/5");
                } else {
                    rejectedCount.incrementAndGet();
                    System.out.println("‚ö†Ô∏è  –û—á–µ—Ä–µ–¥—å –ø–æ–ª–Ω–∞! –§–∞–π–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: " + file);
                }
                
                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏ (100-1000 –º—Å)
                int delay = random.nextInt(900) + 100;
                Thread.sleep(delay);
                
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                break;
            }
        }
        
        System.out.println("üõë –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        printStatistics();
    }
    
    private File generateRandomFile() {
        // –°–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞
        File.FileType[] types = File.FileType.values();
        File.FileType type = types[random.nextInt(types.length)];
        
        // –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ç 10 –¥–æ 100
        int size = random.nextInt(91) + 10;
        
        return new File(type, size);
    }
    
    public void stop() {
        running.set(false);
    }
    
    public void printStatistics() {
        System.out.println("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:");
        System.out.println("   ‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: " + generatedCount.get());
        System.out.println("   ‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: " + rejectedCount.get());
    }
    
    public int getGeneratedCount() {
        return generatedCount.get();
    }
}
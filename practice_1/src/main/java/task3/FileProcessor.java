package main.java.task3;

// src/main/java/task3/FileProcessor.java

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;

public class FileProcessor implements Runnable {
    private final String name;
    private final File.FileType supportedType;
    private final BlockingQueue<File> queue;
    private final AtomicBoolean running = new AtomicBoolean(true);
    private final AtomicInteger processedCount = new AtomicInteger(0);
    private final AtomicInteger skippedCount = new AtomicInteger(0);
    
    public FileProcessor(String name, File.FileType supportedType, BlockingQueue<File> queue) {
        this.name = name;
        this.supportedType = supportedType;
        this.queue = queue;
    }
    
    @Override
    public void run() {
        System.out.println("‚úÖ " + name + " –∑–∞–ø—É—â–µ–Ω (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç " + supportedType + ")");
        
        while (running.get() && !Thread.currentThread().isInterrupted()) {
            try {
                // –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å —Ñ–∞–π–ª –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                File file = queue.poll(500, TimeUnit.MILLISECONDS);
                
                if (file == null) {
                    // –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –∂–¥–µ–º
                    continue;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª
                if (file.getType() == supportedType) {
                    processFile(file);
                    processedCount.incrementAndGet();
                } else {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
                    boolean returned = queue.offer(file, 100, TimeUnit.MILLISECONDS);
                    if (returned) {
                        skippedCount.incrementAndGet();
                        System.out.println("‚Ü©Ô∏è  " + name + " –≤–µ—Ä–Ω—É–ª " + file + 
                                         " (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç " + file.getType() + ")");
                    } else {
                        System.out.println("‚ùå " + name + " –Ω–µ —Å–º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å " + file + 
                                         " –≤ –æ—á–µ—Ä–µ–¥—å");
                    }
                    
                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –¥–∞—Ç—å –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º —à–∞–Ω—Å
                    Thread.sleep(50);
                }
                
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                break;
            }
        }
        
        System.out.println("üõë " + name + " –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        printStatistics();
    }
    
    private void processFile(File file) throws InterruptedException {
        int processingTime = file.getProcessingTime();
        
        System.out.println("‚öôÔ∏è  " + name + " –Ω–∞—á–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É " + file + 
                         " (–≤—Ä–µ–º—è: " + processingTime + " –º—Å)");
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        Thread.sleep(processingTime);
        
        long processingDuration = System.currentTimeMillis() - file.getCreatedAt();
        System.out.println("‚úîÔ∏è  " + name + " –∑–∞–≤–µ—Ä—à–∏–ª " + file + 
                         " (–æ–±—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–∏—Å—Ç–µ–º–µ: " + processingDuration + " –º—Å)");
    }
    
    public void stop() {
        running.set(false);
    }
    
    public void printStatistics() {
        System.out.println("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ " + name + ":");
        System.out.println("   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: " + processedCount.get());
        System.out.println("   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: " + skippedCount.get());
    }
    
    public int getProcessedCount() {
        return processedCount.get();
    }
}